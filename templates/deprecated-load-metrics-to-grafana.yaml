variables:
  TF_ROOT: grafana/terraform

image:
  name: "$CI_TEMPLATE_REGISTRY_HOST/gitlab-org/terraform-images/releases/1.4:v1.0.0"

cache:
  key: "${TF_ROOT}"
  paths:
    - ${TF_ROOT}/.terraform/

.terraform:fmt:
  stage: validate
  script:
    - gitlab-terraform fmt
  allow_failure: true

.terraform:validate:
  stage: validate
  script:
    - gitlab-terraform validate

.terraform:build:
  variables:
    TF_STATE_NAME: grafana-stage
  stage: build
  script:
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  resource_group: ${TF_STATE_NAME}
  artifacts:
    # The next line, which disables public access to pipeline artifacts, may not be available everywhere.
    # See: https://docs.gitlab.com/ee/ci/yaml/#artifactspublic
    public: false
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json

.terraform:deploy:
  stage: deploy
  variables:
    TF_STATE_NAME: grafana-stage
  script:
    - gitlab-terraform apply
  resource_group: ${TF_STATE_NAME}
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $TF_AUTO_DEPLOY == "true"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual

.terraform:destroy:
  stage: cleanup
  variables:
    TF_STATE_NAME: grafana-stage
  script:
    - gitlab-terraform destroy
  resource_group: ${TF_STATE_NAME}
  when: manual


#terraform {
#  required_providers {
#    grafana = {
#      source = "grafana/grafana"
#      version = "2.18.0"
#    }
#  }
#}
.grafana-fmt:
  stage: grafana-validate
  extends: .terraform:fmt
  needs: ["grafana-prepare"]

.grafana-validate:
  stage: grafana-validate
  extends: .terraform:validate
  needs: ["grafana-prepare"]

.grafana-build:
  stage: grafana-build
  variables:
    TF_STATE_NAME: grafana-stage
  extends: .terraform:build
  needs: ["grafana-prepare"]
  environment:
    name: $TF_STATE_NAME
    action: prepare

.grafana-deploy:
  stage: grafana-deploy
  variables:
    TF_STATE_NAME: grafana-stage
  needs: ["grafana-prepare"]
  extends: .terraform:deploy
  environment:
    name: $TF_STATE_NAME
    action: start

.grafana-terraform:destroy:
  stage: grafana-cleanup
  variables:
    TF_STATE_NAME: grafana-stage
  script:
    - gitlab-terraform destroy
  resource_group: ${TF_STATE_NAME}
  when: manual